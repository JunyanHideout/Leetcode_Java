public class Solution {
    public int maximumGap(int[] n) {
        if(n.length<2) return 0;
        int[] bucket_max=new int[n.length];
        int[] bucket_min=new int[n.length];
        for(int i=0;i<n.length;i++) bucket_max[i]=Integer.MIN_VALUE;
        for(int i=0;i<n.length;i++) bucket_min[i]=Integer.MAX_VALUE;
        int max=Integer.MIN_VALUE; 
        int min=Integer.MAX_VALUE;
        for(int i=0;i<n.length;i++){
            if(max<n[i]) max=n[i];
            if(min>n[i]) min=n[i];
        }
        int bucket_size=(max-min)/n.length +1;
        for(int i=0;i<n.length;i++){
            int bidx=(n[i]-min)/bucket_size;
            bucket_max[bidx]=Math.max(bucket_max[bidx],n[i]);
            bucket_min[bidx]=Math.min(bucket_min[bidx],n[i]);
        }
        int max_gap=bucket_max[0]-bucket_min[0];
        int pre_max=bucket_max[0];
        for(int i=1;i<n.length;i++){
            if(bucket_min[i]!=Integer.MAX_VALUE){
                max_gap=Math.max(max_gap,bucket_min[i]-pre_max);
                pre_max=bucket_max[i];
            }
        }
        return max_gap;
    }
}
